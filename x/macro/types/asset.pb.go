// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: macro/macro/asset.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CollateralData defines the macro module's CollateralData state.
type CollateralData struct {
	CollateralAsset github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=collateral_asset,json=collateralAsset,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"collateral_asset" yaml:"collateral_asset"`
	// minted_stable_coin is the number of minted stable coin that mortgage by assets
	MintedStableCoin github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=minted_stable_coin,json=mintedStableCoin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"minted_stable_coin" yaml:"minted_stable_coin"`
}

func (m *CollateralData) Reset()         { *m = CollateralData{} }
func (m *CollateralData) String() string { return proto.CompactTextString(m) }
func (*CollateralData) ProtoMessage()    {}
func (*CollateralData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e4d3a1203883174, []int{0}
}
func (m *CollateralData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollateralData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollateralData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollateralData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollateralData.Merge(m, src)
}
func (m *CollateralData) XXX_Size() int {
	return m.Size()
}
func (m *CollateralData) XXX_DiscardUnknown() {
	xxx_messageInfo_CollateralData.DiscardUnknown(m)
}

var xxx_messageInfo_CollateralData proto.InternalMessageInfo

func (m *CollateralData) GetCollateralAsset() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CollateralAsset
	}
	return nil
}

func init() {
	proto.RegisterType((*CollateralData)(nil), "macro.macro.CollateralData")
}

func init() { proto.RegisterFile("macro/macro/asset.proto", fileDescriptor_6e4d3a1203883174) }

var fileDescriptor_6e4d3a1203883174 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcf, 0x4d, 0x4c, 0x2e,
	0xca, 0xd7, 0x87, 0x90, 0x89, 0xc5, 0xc5, 0xa9, 0x25, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0xdc, 0x60, 0x21, 0x3d, 0x30, 0x29, 0x25, 0x92, 0x9e, 0x9f, 0x9e, 0x0f, 0x16, 0xd7, 0x07, 0xb1,
	0x20, 0x4a, 0xa4, 0xe4, 0x92, 0xf3, 0x8b, 0x73, 0xf3, 0x8b, 0xf5, 0x93, 0x12, 0x8b, 0x53, 0xf5,
	0xcb, 0x0c, 0x93, 0x52, 0x4b, 0x12, 0x0d, 0xf5, 0x93, 0xf3, 0x33, 0xf3, 0x20, 0xf2, 0x4a, 0xf3,
	0x99, 0xb8, 0xf8, 0x9c, 0xf3, 0x73, 0x72, 0x12, 0x4b, 0x52, 0x8b, 0x12, 0x73, 0x5c, 0x12, 0x4b,
	0x12, 0x85, 0x26, 0x32, 0x72, 0x09, 0x24, 0xc3, 0x85, 0xe2, 0xc1, 0x16, 0x4a, 0x30, 0x2a, 0x30,
	0x6b, 0x70, 0x1b, 0x49, 0xea, 0x41, 0x8c, 0xd3, 0x03, 0x19, 0xa7, 0x07, 0x35, 0x4e, 0xcf, 0x39,
	0x3f, 0x33, 0xcf, 0xc9, 0xfb, 0xc4, 0x3d, 0x79, 0x86, 0x4f, 0xf7, 0xe4, 0xc5, 0x2b, 0x13, 0x73,
	0x73, 0xac, 0x94, 0xd0, 0x0d, 0x50, 0x5a, 0x75, 0x5f, 0x5e, 0x23, 0x3d, 0xb3, 0x24, 0xa3, 0x34,
	0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xea, 0x2c, 0x08, 0xa5, 0x5b, 0x9c, 0x92, 0xad, 0x5f, 0x52,
	0x59, 0x90, 0x5a, 0x0c, 0x36, 0xab, 0x38, 0x88, 0x1f, 0xa1, 0xdd, 0x11, 0xa4, 0x5b, 0xa8, 0x92,
	0x4b, 0x28, 0x37, 0x33, 0xaf, 0x24, 0x35, 0x25, 0xbe, 0xb8, 0x24, 0x31, 0x29, 0x27, 0x35, 0x1e,
	0xe4, 0x05, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x4e, 0x88, 0xcd, 0xb7, 0xee, 0xc9, 0xab, 0x11, 0x61,
	0xbc, 0x4b, 0x6a, 0xf2, 0xa7, 0x7b, 0xf2, 0x92, 0x10, 0x37, 0x62, 0x9a, 0xa8, 0x14, 0x24, 0x00,
	0x11, 0x0c, 0x06, 0x8b, 0x81, 0x3d, 0xa6, 0x7e, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c,
	0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72,
	0x0c, 0x51, 0xbc, 0x15, 0xd0, 0x38, 0x01, 0x9b, 0x9d, 0xc4, 0x06, 0x0e, 0x51, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x39, 0xab, 0xda, 0xd5, 0xaf, 0x01, 0x00, 0x00,
}

func (m *CollateralData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollateralData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollateralData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MintedStableCoin.Size()
		i -= size
		if _, err := m.MintedStableCoin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CollateralAsset) > 0 {
		for iNdEx := len(m.CollateralAsset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CollateralAsset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAsset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAsset(dAtA []byte, offset int, v uint64) int {
	offset -= sovAsset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CollateralData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CollateralAsset) > 0 {
		for _, e := range m.CollateralAsset {
			l = e.Size()
			n += 1 + l + sovAsset(uint64(l))
		}
	}
	l = m.MintedStableCoin.Size()
	n += 1 + l + sovAsset(uint64(l))
	return n
}

func sovAsset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAsset(x uint64) (n int) {
	return sovAsset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CollateralData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollateralData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollateralData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralAsset = append(m.CollateralAsset, types.Coin{})
			if err := m.CollateralAsset[len(m.CollateralAsset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintedStableCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintedStableCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAsset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAsset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAsset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAsset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAsset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAsset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAsset = fmt.Errorf("proto: unexpected end of group")
)
